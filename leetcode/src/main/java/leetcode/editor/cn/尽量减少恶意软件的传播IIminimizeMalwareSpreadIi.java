/**
 * @Title: 928.尽量减少恶意软件的传播 II
 * @TitleSlug: minimizeMalwareSpreadIi
 * @Author: Neo
 * @Date: 2024-04-17 00:08:06
 */
package leetcode.editor.cn;

import java.util.HashMap;
import java.util.Map;

public class 尽量减少恶意软件的传播IIminimizeMalwareSpreadIi {
    public static void main(String[] args) {
        // 测试代码
        // Solution solution = new 尽量减少恶意软件的传播IIminimizeMalwareSpreadIi().new Solution();
    }
    
    // leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        private int nodeId = -1, nodeCnt = 0;
        
        public int minMalwareSpread(int[][] graph, int[] initial) {
            int n = graph.length;
            int minInitial = n;
            boolean[] visited = new boolean[n], isInitial = new boolean[n];
            Map<Integer, Integer> map = new HashMap<>();
            for (int x : initial) {
                isInitial[x] = true;
                minInitial = Math.min(minInitial, x);
            }
            int ans = minInitial, maxCnt = 0;
            for (int i = 0; i < n; i++) {
                if (isInitial[i] || visited[i]) {
                    continue;
                }
                nodeCnt = 0;
                nodeId = -1;
                dfs(graph, i, visited, isInitial);
                if (nodeId > 0) {
                    int cnt = map.getOrDefault(nodeId, 0) + nodeCnt;
                    map.put(nodeId, cnt);
                    if (cnt > maxCnt || (cnt == maxCnt && nodeId < ans)) {
                        maxCnt = cnt;
                        ans = nodeId;
                    }
                }
            }
            return ans;
        }
        
        private void dfs(int[][] graph, int x, boolean[] visited, boolean[] isInitial) {
            visited[x] = true;
            nodeCnt++;
            for (int y = 0; y < graph[x].length; y++) {
                if (graph[x][y] == 0) {
                    continue;
                }
                if (isInitial[y]) {
                    if (nodeId != -2 && nodeId != y) {
                        nodeId = nodeId == -1 ? y : -2;
                    }
                } else if (!visited[y]) {
                    dfs(graph, y, visited, isInitial);
                }
            }
        }
    }
// leetcode submit region end(Prohibit modification and deletion)

}
       