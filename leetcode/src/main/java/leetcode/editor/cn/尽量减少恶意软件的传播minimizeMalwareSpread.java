/**
 * @Title: 924.尽量减少恶意软件的传播
 * @TitleSlug: minimizeMalwareSpread
 * @Author: Neo
 * @Date: 2024-04-16 00:06:43
 */
package leetcode.editor.cn;

public class 尽量减少恶意软件的传播minimizeMalwareSpread {
    public static void main(String[] args) {
        // 测试代码
        // Solution solution = new 尽量减少恶意软件的传播minimizeMalwareSpread().new Solution();
    }
    
    // leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public int minMalwareSpread(int[][] graph, int[] initial) {
            int n = graph.length, minInitial = n;
            boolean[] visited = new boolean[n], isInitial = new boolean[n];
            for (int i : initial) {
                isInitial[i] = true;
                minInitial = Math.min(minInitial, i);
            }
            int ans = minInitial, maxSize = 0;
            for (int x : initial) {
                if (visited[x]) {
                    continue;
                }
                int[] res = dfs(graph, visited, x, isInitial);
                if (res[1] == 1) {
                    if (res[0] > maxSize) {
                        maxSize = res[0];
                        ans = x;
                    } else if (res[0] == maxSize) {
                        ans = Math.min(ans, x);
                    }
                }
            }
            return ans;
        }
        
        private int[] dfs(int[][] graph, boolean[] visited, int x, boolean[] isInitial) {
            visited[x] = true;
            int size = 1, initialCnt = 0;
            if (isInitial[x]) {
                initialCnt++;
            }
            for (int y = 0; y < graph[x].length; y++) {
                if (graph[x][y] == 1 && !visited[y]) {
                    int[] res = dfs(graph, visited, y, isInitial);
                    size += res[0];
                    initialCnt += res[1];
                }
            }
            return new int[]{size, initialCnt};
        }
    }
// leetcode submit region end(Prohibit modification and deletion)

}
       