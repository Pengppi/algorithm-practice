    class Solution {
        int cnt = 0;

        public int findTargetSumWays(int[] nums, int target) {
//            backtrack(nums, target, 0);
//            return cnt;
            int sum = Arrays.stream(nums).sum();
            if ((sum - target) % 2 != 0 || (sum - target) < 0) {
                return 0;
            }
            int neg = (sum - target) / 2;
            int dp[][] = new int[nums.length + 1][neg + 1];
            dp[0][0] = 1;
            for (int i = 1; i <= nums.length; i++) {
                int num = nums[i - 1];
                for (int j = 0; j <= neg; j++) {
                    dp[i][j] = dp[i - 1][j];
                    if (j >= num) {
                        dp[i][j] += dp[i - 1][j - num];
                    }
                }
            }

            return dp[nums.length][neg];
        }

        private void backtrack(int[] nums, int target, int i) {
            if (i == nums.length) {
                if (target == 0) {
                    cnt++;
                }
                return;
            }
            backtrack(nums, target + nums[i], i + 1);
            backtrack(nums, target - nums[i], i + 1);
        }
    }

//runtime:4 ms
//memory:40.8 MB
